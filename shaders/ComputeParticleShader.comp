#version 430 compatibility
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout( binding=0 ) buffer Pos
{
	vec4 Positions[];
};

layout(binding = 1) buffer Vel
{
    vec4 Velocities[];
};

layout( local_size_x = 32, local_size_y = 32, local_size_z = 1 ) in;

uniform vec2 ShootIndex;
uniform float timer;
uniform float rate;
uniform vec3 InitVel;

float lifetime = 500.0f;

void main(void)
{

    const float DT = 0.1;
    const vec3 G = vec3(0.0, -0.098, 0.0);

	uint index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y;

    if (index > 1024)
        return;

    float life = Velocities[index].w;
    float shot = Positions[index].w;

    vec3 p = Positions[index].xyz;
    vec3 v = Velocities[index].xyz;

    if (timer >= rate && (index == ShootIndex.x))
    {
        shot = 1.0;
    }

    if (shot == 1.0)
    {
        life += DT;
        v += G * DT;

        p += 0.01 * vec3(v) * DT;
    }

    if (life > lifetime)
    {
        life = 0.0;
        shot = 0.0;
        p = vec3(0, 0, 0);
        v = vec3(InitVel);
    }

    Positions[index] = vec4(p, shot);
    Velocities[index] = vec4(v.xyz, life);
}
